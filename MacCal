from torch.profiler import profile, record_function, ProfilerActivity

with profile(activities=[ProfilerActivity.CPU], record_shapes=True) as prof:
    with record_function("model_inference"):
        # Replace input with profile the model
        model(input)

total_macs = 0
for event in prof.key_averages():
    if "conv2d" in event.key or "addmm" in event.key:
        # For a linear layer (addmm), MACs = input_features * output_features
        # For a conv layer, MACs = in_channels * out_channels * kernel_w * kernel_h * out_w * out_h
        # Profiler gives us flop count (roughly 2*MACs), so we divide by 2
        total_macs += event.flops

C = total_macs / 1e6
print(f"Model Complexity (Mega MACs): {C:.4f}")
