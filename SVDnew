import torch
import torch.nn as nn
import numpy as np
from torch.utils.data import DataLoader, TensorDataset, Dataset
from tqdm import tqdm
from sklearn.model_selection import train_test_split
from torch.profiler import profile, ProfilerActivity

from models.SVD_3depth import SVDNet3LayerD
from models.SVD_3layer import SVDNet3Layer
from models.SVD_prune import SVDNetPrune

# --- Constants ---
BATCH_SIZE = 64
TEST_RATIO = 0.2
NUM_EPOCHS = 30
LEARNING_RATE = 1e-4
M, N, Q, r = 64, 64, 2, 24


# --- Functions ---

@torch.jit.script
def complex_matmul_fused(A, B):
    """
    A: (batch, M, K, 2)   where A[...,0]=real, A[...,1]=imag
    B: (batch, K, N, 2)
    returns: (batch, M, N, 2)
    """
    A_r, A_i = A[..., 0], A[..., 1]
    B_r, B_i = B[..., 0], B[..., 1]

    top_A = torch.cat([A_r, -A_i], dim=2)
    bot_A = torch.cat([A_i, A_r], dim=2)
    Ar = torch.cat([top_A, bot_A], dim=1)

    top_B = torch.cat([B_r, -B_i], dim=2)
    bot_B = torch.cat([B_i, B_r], dim=2)
    Br = torch.cat([top_B, bot_B], dim=1)

    C = torch.bmm(Ar, Br)

    M_shape = A.shape[1]
    N_shape = B.shape[2]
    real = C[:, :M_shape, :N_shape]
    imag = C[:, M_shape:, :N_shape]

    return torch.stack([real, imag], dim=-1)


def complex_hermitian(A):
    return torch.stack([A[..., 0].transpose(-2, -1), -A[..., 1].transpose(-2, -1)], dim=-1)


def get_avg_flops(model: nn.Module, input_data: torch.Tensor) -> float:
    """
    Estimates the average FLOPs per sample for a model using PyTorch Profiler.
    """
    if input_data.dim() == 0 or input_data.size(0) == 0:
        raise RuntimeError("Input data must have a non-zero batch dimension")

    batch_size = input_data.size(0)
    model = model.eval().cpu()
    input_data = input_data.cpu()

    with torch.no_grad():
        with profile(
                activities=[ProfilerActivity.CPU],
                with_flops=True,
                record_shapes=False
        ) as prof:
            model(input_data)

    total_flops = sum(event.flops for event in prof.events())
    avg_flops = total_flops / batch_size

    # Divide by 2 for MACs, and 1e6 for Mega
    return avg_flops * 1e-6 / 2


def load_combined_data():
    """Loads and combines training data from multiple files."""
    train_list = []
    label_list = []
    for i in range(1, 4):
        train_np = np.load(f'./CompetitionData1/Round1TrainData{i}.npy')
        label_np = np.load(f'./CompetitionData1/Round1TrainLabel{i}.npy')
        train_list.append(train_np)
        label_list.append(label_np)

    combined_train = np.concatenate(train_list, axis=0)
    combined_label = np.concatenate(label_list, axis=0)
    return combined_train, combined_label


# --- Dataset & Loss ---

class NormalizedChannelDataset(Dataset):
    def __init__(self, data, labels, mean, std):
        self.data = data
        self.labels = labels
        self.mean = mean
        self.std = std

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        x = self.data[idx]
        y = self.labels[idx]
        x_normalized = (x - self.mean) / (self.std + 1e-8)
        return torch.from_numpy(x_normalized).float(), torch.from_numpy(y).float()


class ApproximationErrorLoss(nn.Module):
    def __init__(self):
        super(ApproximationErrorLoss, self).__init__()

    def forward(self, U, s, V, H_label):
        # Dynamically get batch_size and r from the input tensor shape
        batch_size, _, r, _ = U.shape

        Sigma = torch.diag_embed(s)
        Sigma_complex = torch.stack([Sigma, torch.zeros_like(Sigma)], dim=-1)

        V_H = complex_hermitian(V)
        U_Sigma = complex_matmul_fused(U, Sigma_complex)
        H_pred = complex_matmul_fused(U_Sigma, V_H)

        h_flat = H_label.view(batch_size, -1)
        diff_flat = (H_label - H_pred).view(batch_size, -1)

        norm_h_label = torch.norm(h_flat, p=2, dim=1)
        norm_diff = torch.norm(diff_flat, p=2, dim=1)
        reconstruction_loss = (norm_diff / (norm_h_label + 1e-8)).mean()

        U_H = complex_hermitian(U)
        U_H_U = complex_matmul_fused(U_H, U)
        V_H_V = complex_matmul_fused(V_H, V)

        # Use the dynamically determined 'r'
        I_r = torch.eye(r, device=U.device).expand(batch_size, r, r)
        I_r_complex = torch.stack([I_r, torch.zeros_like(I_r)], dim=-1)

        ortho_loss_U = torch.norm((U_H_U - I_r_complex).view(batch_size, -1), p=2, dim=1).mean()
        ortho_loss_V = torch.norm((V_H_V - I_r_complex).view(batch_size, -1), p=2, dim=1).mean()

        return reconstruction_loss + ortho_loss_U + ortho_loss_V


# --- Main Body ---

def train(model: nn.Module):
    """Trains the SVDNet model."""
    device = next(model.parameters()).device

    all_data_np, all_labels_np = load_combined_data()

    train_np, test_np, train_labels_np, test_labels_np = train_test_split(
        all_data_np, all_labels_np, test_size=TEST_RATIO, random_state=42
    )

    mean = np.mean(train_np)
    std = np.std(train_np)

    train_dataset = NormalizedChannelDataset(train_np, train_labels_np, mean, std)
    test_dataset = NormalizedChannelDataset(test_np, test_labels_np, mean, std)

    train_dataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE)

    loss_fn = ApproximationErrorLoss().to(device)
    optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE)

    best_loss = float('inf')
    best_state_dict = None

    print("--- Starting Training ---")
    for epoch in range(NUM_EPOCHS):
        model.train()
        for h_noise, h_label in tqdm(train_dataloader, desc=f"Epoch {epoch + 1}/{NUM_EPOCHS}"):
            h_noise, h_label = h_noise.to(device), h_label.to(device)

            optimizer.zero_grad()
            U_pred, s_pred, V_pred = model(h_noise)
            loss = loss_fn(U_pred, s_pred, V_pred, h_label)
            loss.backward()
            optimizer.step()

        model.eval()
        total_test_loss = 0.0
        with torch.no_grad():
            for h_noise, h_label in test_loader:
                h_noise, h_label = h_noise.to(device), h_label.to(device)
                U_pred, s_pred, V_pred = model(h_noise)
                test_loss = loss_fn(U_pred, s_pred, V_pred, h_label)
                total_test_loss += test_loss.item()

        mean_test_loss = total_test_loss / len(test_loader)
        print(f"Epoch [{epoch + 1}/{NUM_EPOCHS}], Test Loss: {mean_test_loss:.4f}")

        if mean_test_loss < best_loss:
            best_loss = mean_test_loss
            best_state_dict = model.state_dict()

    print(f"\n--- Training Finished ---\n Best Mean Test Loss: {best_loss:.4f}")
    model.load_state_dict(best_state_dict)


def test_model(model: nn.Module, test_data_path: str, file_name: str):
    """Evaluates the model and saves the predictions."""
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = model.to(device)
    model.eval()

    test_np = np.load(test_data_path)
    test_tensor = torch.from_numpy(test_np).float()
    test_loader = DataLoader(TensorDataset(test_tensor), batch_size=BATCH_SIZE)

    U_list, s_list, V_list = [], [], []
    with torch.no_grad():
        for (h_test,) in test_loader:
            h_test = h_test.to(device)
            U, s, V = model(h_test)
            U_list.append(U.cpu())
            s_list.append(s.cpu())
            V_list.append(V.cpu())

    U_all, s_all, V_all = torch.cat(U_list), torch.cat(s_list), torch.cat(V_list)
    U_np, s_np, V_np = U_all.numpy(), s_all.numpy(), V_all.numpy()

    # Estimate model complexity using a sample from the test data
    mega_macs = get_avg_flops(model, test_tensor.to(device))
    print(f"Estimated MACs for {file_name}: {mega_macs:.2f} MegaMACs")

    np.savez(f"{file_name}.npz", U=U_np, S=s_np, V=V_np, C=mega_macs)
    print(f" Saved predictions to {file_name}.npz")


# --- Execution ---

if __name__ == "__main__":
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f"--- Using device: {device} ---")

    model = SVDNet3LayerD(M=M, N=N, r=r).to(device)
    train(model)

    print("\n--- Starting Testing ---")
    for i in range(1, 4):
        test_data_path = f'./CompetitionData1/Round1TestData{i}.npy'
        submission_path = f"submission/run_{i}"
        test_model(model, test_data_path, submission_path)
